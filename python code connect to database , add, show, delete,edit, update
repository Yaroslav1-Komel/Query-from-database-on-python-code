from tkinter import *
from PIL import ImageTk, Image
import psycopg2

root = Tk ()
root.title ( 'Welcome to the Database' )
root.iconbitmap ( 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PostgreSQL 10\pgAdmin 4.lnk' )
root.geometry ( "500x500" )

# Databases

# Create a database or connect to one
conn = connection = psycopg2.connect ( user="postgres",
                                       password="test",
                                       host="127.0.0.1",
                                       port="5433",
                                       database="DucksburgBank" )

# Print PostgreSQL Connection properties
print ( connection.get_dsn_parameters (), "\n" )

# Create cursor
c = conn.cursor ()
# Create table

# SQL query to create a new table
'''c.execute("""CREATE TABLE managers(
    manager_id INT PRIMARY KEY NOT NULL,
    name           TEXT NOT NULL,
    salary       TEXT NOT NULL)""");
'''
#    # Execute a command: this creates a new table
#    c.execute(create_table_query)
#    conn.commit()
#    print("Table created successfully in PostgreSQL ")



# Create Edit function to update a record
def update() :
    # Create a database or connect to one
    conn = psycopg2.connect ( user="postgres",
                                       password="test",
                                       host="127.0.0.1",
                                       port="5433",
                                       database="DucksburgBank" )
    # Create cursor
    c = conn.cursor ()

    record_id = postgres_delete_query.get()

    c.execute(f"update managers set manager_id = {manager_id_editor.get()},"
        f" name = '{name_editor.get()}', salary = {salary_editor.get()} "
        f"WHERE manager_id = {record_id}")

    # Commit Changes
    conn.commit ()
    # Close Connection
    conn.close ()
    editor.destroy ()

def edit():
    global editor
    editor = Tk ()
    editor.title ( 'Update Record ' )
    editor.iconbitmap ( 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PostgreSQL 10\pgAdmin 4.lnk' )
    editor.geometry ( "500x500" )
    # Create a database or connect to one
    conn = psycopg2.connect ( user="postgres",
                                       password="test",
                                       host="127.0.0.1",
                                       port="5433",
                                       database="DucksburgBank" )
    # Create cursor
    c = conn.cursor()

    record_id = postgres_delete_query.get()
    # Query the database
    c.execute ( "SELECT * FROM managers WHERE manager_id = " + record_id )
    records = c.fetchall()  # fetchall # fetchone #fetchmany
    # print(records)        #print(c.fetchall())
    # Create Global Variable for text box names
    global manager_id_editor
    global name_editor
    global salary_editor

    # Create Text Boxes_editor(update)
    manager_id_editor = Entry ( editor, width=30 )
    manager_id_editor.grid ( row=0, column=1, padx=20, pady=(10, 0) )
    name_editor = Entry ( editor, width=30 )
    name_editor.grid ( row=1, column=1 )
    salary_editor = Entry ( editor, width=30 )
    salary_editor.grid ( row=2, column=1 )

    # Create Text Box Labels_editor(update)
    manager_id_label = Label ( editor, text="Manager_id" )
    manager_id_label.grid ( row=0, column=0, pady=(10, 0) )
    name_label = Label ( editor, text="Name" )
    name_label.grid ( row=1, column=0 )
    salary_label = Label ( editor, text="Salary" )
    salary_label.grid ( row=2, column=0 )

    # Loop thru results
    for record in records :
        manager_id_editor.insert ( 0, record[0] )  # [its item f.x o is one]
        name_editor.insert ( 0, record[1] )
        salary_editor.insert ( 0, record[2] )

    # Create an Save Button to save the record = update
    edit_btn = Button ( editor, text="Save Record", command=update )
    edit_btn.grid ( row=6, column=0, columnspan=2, pady=10, padx=10, ipadx=145 )

# Create Function to Delete A Record
def delete() :
    # Create a database or connect to one
    conn = psycopg2.connect ( user="postgres",
                                       password="test",
                                       host="127.0.0.1",
                                       port="5433",
                                       database="DucksburgBank" )
    # Create cursor
    c = conn.cursor ()

    # Delete a record
    queryString = "DELETE from managers WHERE manager_id ="  + postgres_delete_query.get()
    c.execute ( queryString )

    # Commit Changes
    conn.commit ()
    # Close Connection
    conn.close ()

# Create Submit Function For database
def submit() :
    # Create a database or connect to one
    conn = psycopg2.connect ( user="postgres",
                                       password="test",
                                       host="127.0.0.1",
                                       port="5433",
                                       database="DucksburgBank" )
    # Create cursor
    c = conn.cursor ()

    # Insert into Table
    insertData = {
        "manager_id" : manager_id.get(),
        "name" : name.get(),
        "salary" : salary.get()
                 }

    # Insert into Table
    postgres_insert_query="""
        INSERT INTO managers VALUES (%s,%s,%s);"""
    records_to_insert = (insertData["manager_id"],insertData["name"],insertData["salary"])
    c.execute(postgres_insert_query,records_to_insert)

    # Commit Changes
    conn.commit()
    # Close Connection
    conn.close ()

    # Clear The Text Boxes
    manager_id.delete ( 0, END )
    name.delete ( 0, END )
    salary.delete ( 0, END )

# Create Query Function
def query() :
    # Create a database or connect to one
    conn = psycopg2.connect ( user="postgres",
                                       password="test",
                                       host="127.0.0.1",
                                       port="5433",
                                       database="DucksburgBank" )
    # Create cursor
    c = conn.cursor ()

    # Query the database
    postgres_insert_query = "select * from managers"
    c.execute ( postgres_insert_query )
    manager_records = c.fetchmany ( 0 )
    records = c.fetchall()  # fetchall # fetchone #fetchmany
    # print(records)                          #print(c.fetchall())

    # Loop Thru Results
    print_records = ' '
    for record in records :  # [0]
        print_records += str ( record[0] ) + " " + str ( record[1] ) + " " + "\t" + str ( record[2] ) + "\n"

    query_label = Label ( root, text=print_records )
    query_label.grid ( row=12, column=0, columnspan=2 )

    # Commit Changes
    conn.commit()
    # Close Connection
    conn.close ()

# Create Text Boxes
manager_id = Entry ( root, width=30 )
manager_id.grid ( row=0, column=1, padx=20, pady=(10, 0) )
name = Entry ( root, width=30 )
name.grid ( row=1, column=1 )
salary = Entry ( root, width=30 )
salary.grid ( row=2, column=1 )

postgres_delete_query = Entry ( root, width=30 )
postgres_delete_query.grid ( row=9, column=1, pady=5 )

# Create Text Box Labels
manager_id_label = Label ( root, text="Manager_id" )
manager_id_label.grid ( row=0, column=0, pady=(10, 0) )
name_label = Label ( root, text="Name" )
name_label.grid ( row=1, column=0 )
salary_label = Label ( root, text="Salary" )
salary_label.grid ( row=2, column=0 )

postgres_delete_query_label = Label ( root, text="Select ID" )
postgres_delete_query_label.grid ( row=9, column=0, pady=5 )

# Create Submit Button
submit_btn = Button ( root, text="Add Record To Database", command=submit )
submit_btn.grid ( row=6, column=0, columnspan=2, pady=10, padx=10, ipadx=110 )

# Create a Query Button
query_btn = Button ( root, text="Show Records", command=query )
query_btn.grid ( row=7, column=0, columnspan=2, pady=10, padx=10, ipadx=137 )

# Create A Delete Button
delete_btn = Button ( root, text="Delete Record", command=delete )
delete_btn.grid ( row=10, column=0, columnspan=2, pady=10, padx=10, ipadx=136 )

# Create an Update Button
edit_btn = Button ( root, text="Edit Record", command=edit )
edit_btn.grid ( row=11, column=0, columnspan=2, pady=10, padx=10, ipadx=143 )

# Commit Changes
conn.commit ()
root.mainloop ()
# Close Connection
conn.close ()
